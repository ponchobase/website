var poncho_json = {
    // Home
    home_swiper: "",

    // Meme generator
    meme_canvas: "",
    template: "with_sign",

    // Messages
    messages_timeout: ""
}

    
var image = "";

poncho_json.memes = {
    templates: [
        {
            filename: "With_Sign",
            filetype: "png",
            state: "active"
        },
        {
            filename: "Change_My_Mind",
            filetype: "png",
            state: ""
        },
        {
            filename: "Smart",
            filetype: "png",
            state: ""
        },
        {
            filename: "Drake_Hotline_Bling",
            filetype: "png",
            state: ""
        },
        {
            filename: "Truck",
            filetype: "png",
            state: ""
        },
        {
            filename: "Dark_Army",
            filetype: "png",
            state: ""
        },
        {
            filename: "Pepe",
            filetype: "png",
            state: ""
        },
        {
            filename: "Ponchonator",
            filetype: "png",
            state: ""
        },
        {
            filename: "Gold_Poncho",
            filetype: "png",
            state: ""
        },
        {
            filename: "Celebration",
            filetype: "png",
            state: ""
        },
        {
            filename: "McDonalds",
            filetype: "png",
            state: ""
        },
        {
            filename: "Brain_Jeet_Holder",
            filetype: "png",
            state: ""
        },
        {
            filename: "Brain_Jeet",
            filetype: "png",
            state: ""
        },
        {
            filename: "Brain_Holder",
            filetype: "png",
            state: ""
        },
        {
            filename: "Workout",
            filetype: "png",
            state: ""
        },
        {
            filename: "Dark_Planet",
            filetype: "png",
            state: ""
        },
        {
            filename: "Death",
            filetype: "png",
            state: ""
        },
        {
            filename: "Background",
            filetype: "png",
            state: ""
        },
        {
            filename: "BASE_Blue",
            filetype: "png",
            state: ""
        },
        {
            filename: "Beige",
            filetype: "png",
            state: ""
        },
        {
            filename: "Blackout",
            filetype: "png",
            state: ""
        },
        {
            filename: "Green",
            filetype: "png",
            state: ""
        },
        {
            filename: "Light_Blue",
            filetype: "png",
            state: ""
        },
        {
            filename: "OG",
            filetype: "png",
            state: ""
        },
        {
            filename: "Orange",
            filetype: "png",
            state: ""
        },
        {
            filename: "Pink",
            filetype: "png",
            state: ""
        },
        {
            filename: "Punk",
            filetype: "png",
            state: ""
        },
        {
            filename: "Purple",
            filetype: "png",
            state: ""
        }
    ]
}
poncho_json.messages = {
    meme_generator: {
        download: {
            success: `<p><i class="fas fa-check font--green"></i> Downloading Poncho meme.</p>
                <p class="font--small">Note: Click &nbsp;<i class="fa-solid fa-save"></i> then right-click (desktop) or hold (mobile) image for additional download options.</p>`
        },
        edit: {
            success: '<p><i class="fas fa-check font--green"></i> Editing Poncho meme.</p>'
        },
        layers: {
            delete: {
                success: `<p><i class="fas fa-check font--green"></i> Poncho meme layer deleted.</p>`
            },
            none: {
                error: `<p><i class="fas fa-times font--red"></i> Poncho meme has no layers.</p>`
            }
        },
        reset: {
            success: '<p><i class="fas fa-check font--green"></i> Poncho meme generator reset.</p>'
        },
        save: {
            success: `<p><i class="fas fa-check font--green"></i> Poncho meme saved.</p>`
        },
        upload_iamge: {
            error: `<p><i class="fas fa-times font--red"></i> Error uploading image.</p>
                <p class="font--small">Note: Only JPG/JPEG and PNG file formats supported.</p>`
        },
        upload_template: {
            error: `<p><i class="fas fa-times font--red"></i> Error uploading template.</p>
                <p class="font--small">Note: Only JPG/JPEG and PNG file formats supported.</p>`
        }
    }
}
// On document ready
$(function () {
    try {
        // Initialize app
        initialize_app();
    } catch (e) {
        // console.log(e);
    }
});

function initialize_app() {
    try {
        // Load templates
        load_templates();

        // Primary
        // Init accordions
        init_accordions();

        // Init anchor tags
        init_anchor_tags();

        // Init charts
        init_charts();

        // Init lazy load
        init_lazy_load();

        // Init messages
        init_messages();

        // Init modals
        init_modals();

        // Init particles
        init_particles();

        // Init popstate
        init_popstate();

        // Init scroll
        init_scroll();

        // Init swipers
        init_swipers();

        // Read token
        read_token(true);

        // Set read token interval
        set_read_token_interval();

        // Secondary
        // Init meme generator
        init_meme_generator();
    } catch (e) {
        // console.error(e);
    }
}

function load_templates() {
    try {
        // Modals
        var html = Handlebars.templates.modals();
        $(".modals").html(html);
    } catch (e) {
        // console.error(e);
    }
}
function check_array_defined(array) {
    try {
        // Check if
        if (typeof array == "undefined" || array == null || !$.isArray(array)) {
            // Vars
            array = [];
        }
    } catch (e) {
        // console.error(e);
        array = [];
    }

    // Return
    return array;
}

function check_value_defined(value) {
    try {
        // Check if
        if (typeof value == "undefined" || value == null) {
            // Vars
            value = "";
        }
    } catch (e) {
        // console.error(e);
        // Vars
        value = "";
    }

    // Return
    return value;
}

function copy_to_clipboard(e, selector) {
    try {
        // Vars
        var selector_parent = $(e.currentTarget).closest(selector);

        // Copy to clipboard
        navigator.clipboard.writeText(e.currentTarget.value);

        // Add class
        $(selector_parent).addClass("copied");

        // Set timeout - 2 seconds
        setTimeout(function () {
            // Remove class
            $(selector_parent).removeClass("copied");
        }, 2000);
    } catch (e) {
        // console.error(e);
    }
}

function delete_search_parameter(name, action) {
    try {
        if ("URLSearchParams" in window) {
            // Vars
            var parameters = new URLSearchParams(window.location.search);

            // Delete search parametereter
            parameters.delete(name);

            // Check if
            if (check_value_defined(parameters.toString())) {
                // Vars
                var new_url = window.location.pathname + "?" + parameters.toString();
            } else {
                // Vars
                var new_url = window.location.pathname;
            }

            // Check if
            if (!get_search_parameter(name) || action == "replace") {
                // Replace history
                history.replaceState("", "", new_url);
            } else if (action == "update") {
                // Update history
                history.pushState("", "", new_url);
            }
        }
    } catch (e) {
        // console.error(e);
    }
}

function format_number_decimals(value) {
    try {
        // Check if
        if ($.isNumeric(value)) {
            // Check if
            if (value >= 1 || value <= -1) {
                // 2 decimals
                value = parseFloat(value).toFixed(2);
            } else {
                // Number zeros after decimal
                var number_zeros = -Math.floor(Math.log10(Math.abs(value)) + 1);

                // Number of decimals = number zeros + 4
                var number_decimals = number_zeros + 4;

                // Check if
                if (number_zeros > 10) {
                    // Vars
                    value = 0;
                } else {
                    // Check if
                    if (number_decimals >= 10) {
                        // Vars
                        number_decimals = 10;
                    }

                    // Format value to number of decimals and trim extra zeros
                    value = parseFloat(parseFloat(value).toFixed(number_decimals));
                }
            }
        } else {
            // Vars
            value = 0;
        }
    } catch (e) {
        // console.error(e);
    }

    // Return
    return value;
}

function format_value_percent(value, percent) {
    // Define vars
    var return_string = "";

    try {
        // Check if
        if ($.isNumeric(value)) {
            // Vars
            value = format_number_decimals(value);
            percent = parseFloat(percent).toFixed(2);

            // Vars
            var change_color = get_change_color(percent);
            var change_direction = get_change_direction(percent);

            // Vars
            return_string = `<span class="font--bold font--${change_color}">${change_direction} $${value} (${percent}%)</span>`;
        }
    } catch (e) {
        // console.error(e);
    }

    // Return
    return return_string;
}

function get_change_color(value) {
    // Define vars
    var change_color = "";

    try {
        // Check if
        if (value > 0) {
            // Vars
            change_color = "green";
        } else if (value < 0) {
            // Vars
            change_color = "red";
        } else {
            // Vars
            change_color = "white";
        }
    } catch (e) {
        // console.error(e);
    }

    // Return
    return change_color;
}

function get_change_direction(value) {
    // Define vars
    var change_direction = "";

    try {
        // Check if
        if (value < 0) {
            // Vars
            change_direction = '<i class="fas fa-long-arrow-alt-down"></i>';
        } else if (value > 0) {
            // Vars
            change_direction = '<i class="fas fa-long-arrow-alt-up"></i>';
        } else {
            // Vars
            change_direction = '';
        }
    } catch (e) {
        // console.error(e);
    }

    // Return
    return change_direction;
}

function get_search_parameter(name) {
    // Define vars
    var parameter = false;

    try {
        // Vars
        var href = window.location.pathname + window.location.search;
        var search_parameters = href.split("?");
        search_parameters = search_parameters[1];

        // Check if
        if ("URLSearchParams" in window) {
            // Search parameters
            var parameters = new URLSearchParams(search_parameters);
            parameter = check_value_defined(parameters.get(name));
        }
    } catch (e) {
        // console.log(e);
    }

    // Return
    return parameter;
}

function init_anchor_tags() {
    try {
        // On click
        $('a[href^="#"]').on("click", function (e) {
            // Vars
            var href = $(this).attr("href");

            // Check if
            if ($(".site__header .header-position-fixed").length > 0) {
                // Vars
                var headerHeight = $("header").innerHeight();
            } else {
                // Vars
                var headerHeight = 0;
            }

            // Animate
            $("html,body").animate({ scrollTop: $(href).offset().top - headerHeight - 100 }, 500);
        });
    } catch (e) {
        // console.log(e);
    }
}

function init_lazy_load() {
    try {
        // Callback
        let callback = (entries, observer) => {
            // Loop
            entries.forEach((entry) => {
                // Check if
                if (entry.intersectionRatio >= 0.1 && entry.target.style.opacity != 1) {
                    // Opacity
                    entry.target.style.opacity = 1;
                }
            });
        };

        // Options
        let options = {
            root: null,
            threshold: [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]
        }

        // Observer
        let observer = new IntersectionObserver(callback, options);

        // Select .lazy-load
        for (const target of document.querySelectorAll(".lazy-load")) {
            // Observer
            observer.observe(target);
        }
    } catch (e) {
        // console.error(e);
    }
}

function init_popstate() {
    try {
        // On browser popstate
        $(window).on("popstate", function (event) {
            // Load modal from url
            load_modal_from_url();
        });
    } catch (e) {
        // console.error(e);
    }
}

function throttle(callback, limit) {
    try {
        // Vars
        var wait = false;

        // Return
        return function (...args) {
            // Check if
            if (!wait) {
                // Callback
                callback(...args);

                // True
                wait = true;

                // Set timeout
                setTimeout(function () {
                    // False
                    wait = false;
                }, limit);
            }
        }
    } catch (e) {
        // console.error(e);
    }
}

function update_search_parameters(parameters_array, action) {
    try {
        // Check if
        if ("URLSearchParams" in window) {
            // Search parameters
            var parameters = new URLSearchParams(window.location.search);

            // Check if
            if (check_array_defined(parameters_array)) {
                // Loop
                $.each(parameters_array, function (index, value) {
                    // Check if
                    if (value.name && value.value) {
                        // Set parameters
                        parameters.set(value.name, value.value);
                    }
                });

                // New url
                if (check_value_defined(parameters.toString())) {
                    // Vars
                    var new_url = window.location.pathname + "?" + parameters.toString();
                } else {
                    // Vars
                    var new_url = window.location.pathname;
                }

                // Check if
                if (action) {
                    // Update history
                    history.pushState("", "", new_url);
                } else {
                    // Replace history
                    history.replaceState("", "", new_url);
                }
            }
        }
    } catch (e) {
        // console.error(e);
    }
}
function init_accordions() {
    try {
        // Vars
        var selector_accordions = ".accordions";

        // Check if
        if ($(selector_accordions).length > 0) {
            // Vars
            var selector_accordion = selector_accordions + " .accordion";
            var selector_accordion_all = selector_accordions + " [data-accordions-all]";
            var selector_accordion_trigger = selector_accordion + " .trigger";
            var selector_accordions_container = selector_accordions + " .accordions__container";

            // Update accordion selectors
            update_accordion_selectors();

            // Loop
            $(selector_accordions_container + ":not(.accordions--closed)").each(function (index, value) {
                try {
                    // Check if
                    if (!$(this).hasClass("accordions--init")) {
                        // Vars
                        var selector_accordion_first = ".accordion:first-child";

                        // Add class
                        $(this).addClass("accordions--init");

                        // Show first accordion
                        $(this).find(selector_accordion_first).addClass("accordion--open");
                        $(this).find(selector_accordion_first + " .trigger").attr("aria-expanded", true);
                        $(this).find(selector_accordion_first + " .accordion__panel").show();
                    };
                } catch (e) {
                    // console.error(e);
                }
            });

            // On click
            $(selector_accordion_trigger).off("click");
            $(selector_accordion_trigger).on("click", function () {
                try {
                    // Vars
                    var accordion_id = $(this).attr("aria-controls");

                    // Check if
                    if (!check_value_defined(accordion_id)) {
                        // Update accordion selectors
                        update_accordion_selectors();

                        // Vars
                        var accordion_id = $(this).attr("aria-controls");
                    }

                    // Vars
                    var accordion_open = $(this).attr("aria-expanded") === "true";
                    var selector_accordion_id = $(selector_accordion + " #" + accordion_id);

                    // Check if
                    if (accordion_open) {
                        // Close accordion
                        $(this).attr("aria-expanded", false);
                        $(this).closest(".accordion").removeClass("accordion--open");

                        // Slide up
                        $(selector_accordion_id).slideUp(250, function () {
                            // Animation complete.
                        });

                        // Hidden
                        $(selector_accordion_id).attr("hidden", "");
                    } else {
                        // Open accordion
                        $(this).attr("aria-expanded", true);
                        $(this).closest(".accordion").addClass("accordion--open");

                        // Slide down
                        $(selector_accordion_id).slideDown(250, function () {
                            // Animation complete.
                        });

                        // Remove hidden
                        $(selector_accordion_id).removeAttr("hidden");
                    }
                } catch (e) {
                    // console.error(e);
                }
            });

            // On click
            $(selector_accordion_all).off("click");
            $(selector_accordion_all).on("click", function () {
                try {
                    // Vars
                    var accordions_all = $(this).attr("data-accordions-all");
                    var accordions = $(this).closest(selector_accordions).find(".accordion");

                    // Loop
                    $(accordions).each(function (index, value) {
                        // Vars
                        var accordion_id = $(this).find(".trigger").attr("aria-controls");

                        // Check if
                        if (!check_value_defined(accordion_id)) {
                            // Update accordion selectors
                            update_accordion_selectors();

                            // Vars
                            var accordion_id = $(this).attr("aria-controls");
                        }

                        // Check if
                        if (accordions_all == "hide") {
                            // Close accordion by id
                            close_accordion_by_id(accordion_id);
                        } else {
                            // Open accordion by id
                            open_accordion_by_id(accordion_id);
                        }
                    });
                } catch (e) {
                    // console.error(e);
                }
            });
        }
    } catch (e) {
        // console.error(e);
    }
}

function close_accordion_by_id(accordion_id) {
    try {
        // Vars
        var selector_accordions = ".accordions";
        var selector_accordion = selector_accordions + " .accordion";
        var selector_accordion_id = $(selector_accordion + " #" + accordion_id);

        // Close accordion
        $(selector_accordion + " [aria-controls=" + accordion_id + "]").attr("aria-expanded", false);
        $(selector_accordion + " [aria-controls=" + accordion_id + "]").closest(".accordion").removeClass("accordion--open");

        // Hide
        $(selector_accordion_id).hide();

        // Remove hidden
        $(selector_accordion_id).attr("hidden", "");
    } catch (e) {
        // console.error(e);
    }
}

function open_accordion_by_id(accordion_id) {
    try {
        // Vars
        var selector_accordions = ".accordions";
        var selector_accordion = selector_accordions + " .accordion";
        var selector_accordion_id = $(selector_accordion + " #" + accordion_id);

        // Open accordion
        $(selector_accordion + " [aria-controls=" + accordion_id + "]").attr("aria-expanded", true);
        $(selector_accordion + " [aria-controls=" + accordion_id + "]").closest(".accordion").addClass("accordion--open");

        // Show
        $(selector_accordion_id).show();

        // Hidden
        $(selector_accordion_id).removeAttr("hidden");
    } catch (e) {
        // console.error(e);
    }
}

function update_accordion_selectors() {
    try {
        // Loop
        $(".accordions .accordions__container .accordion").each(function (index, value) {
            // Accordion trigger
            $(this).find(".trigger").attr("id", "accordion_id_" + index);
            $(this).find(".trigger").attr("aria-controls", "accordion_panel_" + index);

            // Accordion panel
            $(this).find(".accordion__panel").attr("id", "accordion_panel_" + index);
            $(this).find(".accordion__panel").attr("aria-labelledby", "accordion_id_" + index);
        });
    } catch (e) {
        // console.error(e);
    }
}
function init_charts() {
    try {
        // Init tokenomics chart
        init_tokenomics_chart();
    } catch (e) {
        // console.error(e);
    }
}

function init_tokenomics_chart() {
    try {
        // Vars
        var ctx = document.getElementById("tokenomics_chart").getContext("2d");
        var type = "pie";

        // Data
        var data = {
            labels: [
                "Team",
                "LP"
            ],
            datasets: [{
                label: "Allocation",
                data: [5, 95],
                backgroundColor: [
                    "#ff9900",
                    "#1d1fff"
                ],
                hoverOffset: 4
            }]
        }

        // Options
        var options = {
            onHover: (event, chartElement) => {
                event.native.target.style.cursor = chartElement[0] ? "pointer" : "default";
            },
            plugins: {
                legend: {
                    display: true,
                    labels: {
                        color: "#fff"
                    },
                    onHover: (event, chartElement) => {
                        event.native.target.style.cursor = chartElement ? "pointer" : "default";
                    }
                },
                tooltip: {
                    backgroundColor: "#1d1a7a",
                    callbacks: {
                        label: function (context) {
                            return " Allocation: " + context.dataset.data[context.dataIndex] + "%";
                        }
                    },
                }
            },
            rotation: 270
        }

        // Init new chart
        new Chart(ctx, {
            type: type,
            data: data,
            options: options
        });
    } catch (e) {
        // console.error(e);
    }
}
function init_messages() {
    try {
        // Vars
        var selector_messages = ".messages";

        // Close messages 
        $(selector_messages + " .close").off("click");
        $(selector_messages + " .close").on("click", function () {
            // Hide
            $(selector_messages).hide();
        });
    } catch (e) {
        // console.error(e);
    }
}

function show_messages(message) {
    try {
        // Vars
        var selector_messages = ".messages";
        var selector_message = selector_messages + " [data-name=message]";

        // Restart timer
        clearTimeout(poncho_json.messages_timeout);

        // Check if
        if (!$(selector_message).is(":visible")) {
            // Empty
            $(selector_message).empty();

            // Append
            $(selector_message).append(message);
        } else {
            // Append existing
            $(selector_message).append(message);
        }

        // Fade in
        $(selector_messages).fadeIn();

        // Set 5 second timeout
        poncho_json.messages_timeout = setTimeout(function () {
            // Fadeout
            $(selector_messages).fadeOut();
        }, 5000);
    } catch (e) {
        // console.error(e);
    }
}
function init_modals() {
    try {
        // Vars
        var modal = ".modal";
        
        // Load modal from url
        load_modal_from_url();

        // On click
        $("[data-modal-button]").off("click");
        $("[data-modal-button]").on("click", function () {
            // Vars
            var data_modal = $(this).attr("data-modal-button");

            // Show modal
            show_modal(data_modal, true);
        });

        // On click
        $(modal + ".modal__background, " + modal + " .close, " + modal + " .close-button").off("click");
        $(modal + " .modal__background, " + modal + " .close, " + modal + " .close-button").on("click", function () {
            // Hide modal
            hide_modal("", "update");
        });
    } catch (e) {
        // console.log(e);
    }
}

function load_modal_from_url() {
    try {
        // Get search parameter
        var data_modal = get_search_parameter("modal");

        // If modal 
        if (data_modal) {
            // Show modal
            show_modal(data_modal, false);
        } else {
            // Hide modal
            hide_modal("", "replace");
        }
    } catch (e) {
        // console.error(e);
    }
}

function show_modal(data_modal, update_history) {
    try {
        // Define vars
        var modal_selector = ".modal";

        // Check if
        if ($(".modal:visible").length > 0) {
            // Hide modal
            $(modal_selector).hide();

            // Show modal
            $("[data-modal=" + data_modal + "]").show();
        }else{
            // Show modal
            $("[data-modal=" + data_modal + "]").fadeIn(250);
        }

        // Show
        $("[data-modal=" + data_modal + "]").css("display", "flex");

        // Add modal content transform
        $(".modal__content").addClass("modal__content-transform");

        // Add disable scroll
        $("body").addClass("disable-scroll");

        // Vars
        var parameters_array = [
            {
                name: "modal",
                value: data_modal,
            }
        ];

        // Check if
        if (update_history) {
            // Update search parameters
            update_search_parameters(parameters_array, true);
        }
    } catch (e) {
        // console.error(e);
    }
}

function hide_modal(data_modal, action) {
    try {
        // If modal selector
        if (!data_modal) {
            // Vars
            data_modal = $(".modal:visible").attr("data-modal");
        }

        // Check if
        if ($(".modal:visible").length > 0) {
            // Hide modal
            $(".modal").fadeOut(50);
        }

        // Remove modal content transform
        $(".modal__content").removeClass("modal__content-transform");

        // Remove disable scroll
        $("body").removeClass("disable-scroll");

        // Check if
        if (data_modal) {
            // Delete search parameter
            delete_search_parameter("modal", action);
        }
    } catch (e) {
        // console.error(e);
    }
}
function init_number_counters() {
    try {
        // Init number counter
        init_number_counter();

        // On scroll
        $(window).on("scroll", function () {
            // Init number counters
            init_number_counter();
        });
    } catch (e) {
        // console.log(e);
    }
}

function animate_count_value(this_text, count_value) {
    try {
        // Animate count
        $({ countNum: this_text.text() }).animate({
            countNum: count_value
        },
            {
                duration: 2500,
                easing: "swing",
                step: function () {
                    this_text.text(Math.floor(this.countNum));
                },
                complete: function () {
                    // Check if
                    if ($(this_text).closest("[data-number]").attr("data-comma") != "Yes") {
                        // Commas
                        this_text.text(numberWithCommas(this.countNum));
                    } else {
                        // No commas
                        this_text.text(this.countNum);
                    }

                    // Update swiper
                    poncho_json.home_swiper.update();
                },
            });
    } catch (e) {
        // console.log(e);
    }
}

function format_counter_value(count_value) {
    // Vars
    var count_value_format = "";

    try {
        // Check if ratio :
        if (count_value.indexOf(":") > -1) {
            // Vars
            var count_values = count_value.split(":");
            var count_value_1 = count_values[0];
            var count_value_2 = count_values[1];

            // New count value
            count_value_format = `<span data-number-format=${count_value_1}></span>:<span data-number-format=${count_value_2}></span>`;
        } else {
            // Format large number and decimals
            count_value_format = format_large_number(count_value);
        }
    } catch (e) {
        // console.log(e);
    }

    // Return
    return count_value_format;
}

function format_large_number(count_value) {
    // Define vars
    var count_value_format = "";
    var letter = "";

    try {
        // Vars
        count_value = Number(count_value);

        // Check value
        if ($.isNumeric(count_value)) {
            // Format number
            if (count_value > 1000000000000 || count_value < -1000000000000) {
                // Trillion
                count_value = (count_value / 1000000000000).toFixed(1);
                letter = "T";
            } else if (count_value > 1000000000 || count_value < -1000000000) {
                // Billion
                count_value = (count_value / 1000000000).toFixed(1);
                letter = "B";
            } else if (count_value > 1000000 || count_value < -1000000) {
                // Million
                count_value = (count_value / 1000000).toFixed(1);
                letter = "M";
            } else if (count_value > 10000 || count_value < -10000) {
                // Thousand
                count_value = (count_value / 1000).toFixed(1);
                letter = "K";
            } else {
                // Round
                count_value = count_value.toFixed(1);
            }
        }

        // Check if decimal .
        if (count_value.indexOf(".") > -1) {
            // Vars
            var count_values = count_value.split(".");
            var count_value_1 = count_values[0];
            var count_value_2 = count_values[1];

            // Check if
            if (count_value_2 == 0 || count_value_2 == "" || typeof count_value_2 == "undefined" || count_value_2 == null) {
                // New count value
                count_value_format = `<span data-number-format=${count_value_1}></span>${letter}`;
            } else {
                // New count value
                count_value_format = `<span data-number-format=${count_value_1}></span>.<span data-number-format=${count_value_2}></span>${letter}`;
            }
        } else {
            // New count value
            count_value_format = `<span data-number-format=${count_value}></span>${letter}`;
        }
    } catch (e) {
        // console.log(e);
    }

    // Return
    return count_value_format;
}

function init_number_counter() {
    try {
        // Loop
        $(".number-counter.count").each(function () {
            // Vars
            var offset_top = $(this).offset().top - window.innerHeight + 50;

            // Check if counter in view
            if ($(window).scrollTop() > offset_top) {
                // Remove count class 
                $(this).removeClass("count");

                // Loop each counter value to format
                $($(this).find(".value [data-number]")).each(function () {
                    // Vars
                    var count_value = $(this).attr("data-number");

                    // Format counter value
                    count_value_format = format_counter_value(count_value);

                    // Append formatted counter value
                    $(this).empty().append(count_value_format);
                });

                // Loop each counter value to animate
                $($(this).find(".value [data-number-format]")).each(function () {
                    // Var
                    var this_text = $(this);
                    var count_value = $(this).attr("data-number-format");

                    // Animate count
                    animate_count_value(this_text, count_value);
                });
            }
        });
    } catch (e) {
        // console.log(e);
    }
}

function numberWithCommas(x) {
    try {
        // Commas
        return x.toString().replace(/\B(?<!\.\d*)(?=(\d{3})+(?!\d))/g, ",");
    } catch (e) {
        // console.log(e);
    }
}
function init_particles() {
    try {
        // Particle JS
        particlesJS("particles", { "particles": { "number": { "value": 150, "density": { "enable": true, "value_area": 1000 } }, "color": { "value": "#ffffff" }, "shape": { "type": "circle", "stroke": { "width": 0, "color": "#000000" }, "polygon": { "nb_sides": 5 }, "image": { "src": "img/github.svg", "width": 100, "height": 100 } }, "opacity": { "value": 1, "random": true, "anim": { "enable": true, "speed": 1, "opacity_min": 0, "sync": false } }, "size": { "value": 6, "random": true, "anim": { "enable": false, "speed": 4, "size_min": 0.3, "sync": false } }, "line_linked": { "enable": false, "distance": 150, "color": "#ffffff", "opacity": 0.4, "width": 1 }, "move": { "enable": true, "speed": 1, "direction": "none", "random": true, "straight": false, "out_mode": "out", "bounce": false, "attract": { "enable": false, "rotateX": 600, "rotateY": 600 } } }, "interactivity": { "detect_on": "canvas", "events": { "onhover": { "enable": true, "mode": "bubble" }, "onclick": { "enable": true, "mode": "repulse" }, "resize": true }, "modes": { "grab": { "distance": 400, "line_linked": { "opacity": 1 } }, "bubble": { "distance": 250, "size": 0, "duration": 2, "opacity": 0, "speed": 3 }, "repulse": { "distance": 400, "duration": 0.4 }, "push": { "particles_nb": 4 }, "remove": { "particles_nb": 2 } } }, "retina_detect": true }); var count_particles, stats, update; stats = new Stats; stats.setMode(0); stats.domElement.style.position = 'absolute'; stats.domElement.style.left = '0px'; stats.domElement.style.top = '0px'; document.body.appendChild(stats.domElement); count_particles = document.querySelector('.js-count-particles'); update = function () { stats.begin(); stats.end(); if (window.pJSDom[0].pJS.particles && window.pJSDom[0].pJS.particles.array) { count_particles.innerText = window.pJSDom[0].pJS.particles.array.length; } requestAnimationFrame(update); }; requestAnimationFrame(update);;
    } catch (e) {
        // console.error(e);
    }
}

function init_scroll() {
    try {
        // Vars
        var scroll_selector_class = ".scroll-top";
        var scroll_selector_id = "#scroll-top";
        var scroll_timeout = "";

        // On scroll
        $(window).on("scroll", throttle(function (event) {
            try {
                // Vars
                var scroll_top = $(this).scrollTop();
                var window_height = window.innerHeight;
                window_height = window_height * 1;

                // Check if
                if (scroll_top > window_height) {
                    // Fade in
                    $(scroll_selector_class).fadeIn(100);

                    // Clear timeout
                    clearTimeout(scroll_timeout)

                    // Set timeout
                    scroll_timeout = setTimeout(function () {
                        // Fade out
                        $(scroll_selector_class).fadeOut(100);
                    }, 2000);
                } else {
                    // Fade out
                    $(scroll_selector_class).fadeOut(100);
                }
            } catch (e) {
                // console.error(e);
            }
        }, 100));

        // On click
        $(scroll_selector_id).off("click");
        $(scroll_selector_id).on("click", function () {
            try {
                // Animate
                $("html, body").animate({ scrollTop: 0 }, 500);

                // Return
                return false;
            } catch (e) {
                // console.error(e);
            }
        });
    } catch (e) {
        // console.error(e);
    }
}
function init_swipers() {
    try {
        // Init about swiper
        init_about_swiper();

        // Init home swiper
        init_home_swiper();

        // Init roadmap swiper
        init_roadmap_swiper();
    } catch (e) {
        // console.error(e);
    }
}

function init_about_swiper() {
    try {
        // Define vars
        var selector_swiper = ".about-swiper";
        var data_swiper = "[data-swiper=about-swiper]";

        // Init new swiper
        new Swiper(data_swiper, {
            // Optional parameters
            direction: "horizontal",
            keyboard: {
                enabled: true,
                onlyInViewport: false,
            },
            mousewheel: {
                forceToAxis: true
            },
            navigation: {
                nextEl: selector_swiper + " .swiper-next",
                prevEl: selector_swiper + " .swiper-prev"
            },
            slidesPerView: "auto",
            slidesPerGroup: 1,
            speed: 600,
            updateOnWindowResize: true
        });
    } catch (e) {
        // console.error(e);
    }
}

function init_home_swiper() {
    try {
        // Define vars
        var selector_swiper = ".home-swiper";
        var data_swiper = "[data-swiper=home-swiper]";

        // Init new swiper
        poncho_json.home_swiper = new Swiper(data_swiper, {
            // Optional parameters
            direction: "horizontal",
            keyboard: {
                enabled: true,
                onlyInViewport: false,
            },
            mousewheel: {
                forceToAxis: true
            },
            navigation: {
                nextEl: selector_swiper + " .swiper-next",
                prevEl: selector_swiper + " .swiper-prev"
            },
            slidesPerView: "auto",
            slidesPerGroup: 1,
            updateOnWindowResize: true
        });
    } catch (e) {
        // console.error(e);
    }
}

function init_roadmap_swiper() {
    try {
        // Define vars
        var selector_swiper = ".roadmap-swiper";
        var data_swiper = "[data-swiper=roadmap-swiper]";

        // Init new swiper
        new Swiper(data_swiper, {
            // Optional parameters
            centeredSlides: true,
            centeredSlidesBounds: true,
            direction: "horizontal",
            keyboard: {
                enabled: true,
                onlyInViewport: false,
            },
            mousewheel: {
                forceToAxis: true
            },
            navigation: {
                nextEl: selector_swiper + " .swiper-next",
                prevEl: selector_swiper + " .swiper-prev"
            },
            slidesPerView: "auto",
            slidesPerGroup: 1,
            updateOnWindowResize: true
        });
    } catch (e) {
        // console.error(e);
    }
}
function read_token(initialize) {
    try {
        // Define vars
        var pair_found = false;

        // Read token
        $.ajax({
            type: "GET",
            cache: false,
            url: "https://api.dexscreener.com/latest/dex/pairs/base/0x6FD34677ecDFae4caE732A5B22F1A3082917eb15",
            success: function (response, status, xhr) {
                // Vars
                response = check_value_defined(response);
                var pair = check_value_defined(response.pair);

                // Update token ui
                pair_found = update_token_ui(initialize, pair);
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                // console.error(errorThrown);
            }
        }).always(() => {
            // nprogress_end();
            // Check if
            if (!pair_found) {
                // Read token backup
                read_token_backup(initialize);
            }
        });
    } catch (e) {
        // console.error(e);
    }
}

function read_token_backup(initialize) {
    try {
        // Read token
        $.ajax({
            type: "GET",
            cache: false,
            url: "https://api.dexscreener.com/latest/dex/tokens/0xc2fe011c3885277c7f0e7ffd45ff90cadc8ecd12",
            success: function (response, status, xhr) {
                // Vars
                response = check_value_defined(response);
                var pairs = check_array_defined(response.pairs);

                // Check if
                if (pairs) {
                    // Loop
                    $.each(pairs, function (index, value) {
                        // Vars
                        var address = check_value_defined(value.baseToken.address);
                        var symbol = check_value_defined(value.baseToken.symbol);
                        var chain_id = check_value_defined(value.chainId);

                        // Check if
                        if (
                            address == "0xC2fE011C3885277c7F0e7ffd45Ff90cADc8ECD12" &&
                            symbol == "PONCHO" &&
                            chain_id == "base"
                        ) {
                            // Update token ui
                            update_token_ui(initialize, value);

                            // Return
                            return false;
                        }
                    });
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                // console.error(errorThrown);
            }
        }).always(() => {
            // nprogress_end();
        });
    } catch (e) {
        // console.error(e);
    }
}

function set_read_token_interval() {
    try {
        // Set interval - 1 min
        setInterval(function () {
            // Read token
            read_token(false);
        }, 60 * 1000);
    } catch (e) {
        // console.error(e);
    }
}

function update_token_ui(initialize, pair) {
    // Define vars
    var pair_found = false;

    try {
        // Check if
        if (pair) {
            // Vars
            var price = check_value_defined(pair.priceUsd);

            // Check if
            if (price) {
                // Vars
                var price_change = check_value_defined(pair.priceChange.h24);
                var price_string = format_value_percent(price, price_change);
                var market_cap = check_value_defined(pair.marketCap);
                var volume = check_value_defined(pair.volume.h24);
                var buys = check_value_defined(pair.txns.h24.buys);
                var sells = check_value_defined(pair.txns.h24.sells);
                var transactions = buys + sells;
                var liquidity = check_value_defined(pair.liquidity.usd);

                // Check if
                if (price_string) {
                    // Append
                    $("[data-token=price]").html(price_string);

                    // Market cap
                    $("[data-token=market_cap]").attr("data-number", market_cap);
                    $("[data-token=market_cap]").closest(".number-counter").addClass("count");

                    // Volume
                    $("[data-token=volume]").attr("data-number", volume);
                    $("[data-token=volume]").closest(".number-counter").addClass("count");

                    // Transactions
                    $("[data-token=transactions]").attr("data-number", transactions);
                    $("[data-token=transactions]").closest(".number-counter").addClass("count");

                    // Liquidity
                    $("[data-token=liquidity]").attr("data-number", liquidity);
                    $("[data-token=liquidity]").closest(".number-counter").addClass("count");

                    // Init number counters
                    init_number_counters();

                    // Update swiper
                    poncho_json.home_swiper.update();

                    // Vars
                    pair_found = true;

                    // Check if
                    if (initialize) {
                        // Set timeout
                        setTimeout(function () {
                            // Title
                            document.title = "$PONCHO: " + price + " (" + price_change + "%) | Poncho on BASE";
                        }, 5000);
                    } else {
                        // Title
                        document.title = "$PONCHO: " + price + " (" + price_change + "%) | Poncho on BASE";
                    }
                }
            }
        }


    } catch (e) {
        // console.error(e);
    }

    // Return
    return pair_found;
}
function init_manage_layers() {
    try {
        // Vars
        var selector_modal_memes = "[data-modal=memes]";
        var selector_meme_generator = selector_modal_memes + " .meme_generator";
        var selector_manage_layers = ".manage-layers .layers";

        // Empty
        $(selector_meme_generator + " " + selector_manage_layers).empty();

        // Check if
        if (poncho_json.meme_canvas.getObjects().length > 0) {
            // Loop
            poncho_json.meme_canvas.getObjects().forEach(function (object, index) {
                // Vars
                var type = object.type;
                var object_string = "";
                var object_layer_type = "";

                // Check if
                if (type == "image") {
                    // Vars
                    object_layer_type = "Image Layer";
                    var image_src = object._element.src;
                    image_src = image_src.replaceAll("/dist/img/memes/templates/", "/dist/img/memes/templates/small/");

                    // Vars
                    var image_src_array = image_src.split("/");
                    var image_src_title = image_src_array.pop();
                    var image_src_array = image_src_title.split(".");
                    var image_src_title = image_src_array[0];

                    // String
                    object_string = `<div class="object image"><img src="${image_src}" alt="${image_src_title}"></div>`;
                } else if (type == "rect") {
                    // Vars
                    object_layer_type = "Shape Layer";
                    var image_src = "/dist/img/memes/templates/small/Transparent.png?v=3";
                    var image_src_title = "Transparent";
                    // var rect_fill = object.fill;
                    // var rect_stroke = object.stroke;
                    // var rect_width = object.strokeWidth;

                    // String
                    object_string = `
                    <div class="object image">
                        <img src="${image_src}" alt="${image_src_title}">
                        <div class="rect"></div>
                    </div>`;
                } else {
                    // Vars
                    object_layer_type = "Text Layer";
                    var text = object.text;

                    // String
                    object_string = `<div class="object text">${text}</div>`;
                }

                // Vars
                var manage_layers_string = `
                    <li data-layer="${index}" title="${object_layer_type}">
                        <i class="grip fa-solid fa-grip-vertical"></i>
                        <div class="inner flexbox flexbox--vertical">
                            ${object_string}
                            <button class="button--transparent delete" type="button" title="Delete Layer"><i class="fa-solid fa-xmark"></i></button>
                        </div>
                    </li>
                `;

                // Append
                $(selector_meme_generator + " " + selector_manage_layers).append(manage_layers_string);
            });

            // Check if
            if (poncho_json.meme_canvas.getActiveObject()) {
                // Set active object
                set_active_object();
            } else {
                // Set active object front
                set_active_object_front();
            }

            // New sortable
            var sortable = new Sortable(layers, {
                group: "layers",
                sort: true,
                onUpdate: function (event) {
                    // Update layers index
                    update_layers_index();
                },
            });

            // Active layer
            select_active_layer();

            // Delete layer
            delete_layer();
        } else {
            // Vars
            var manage_layers_string = `<li>No layers.</li>`;

            // Append
            $(selector_meme_generator + " " + selector_manage_layers).append(manage_layers_string);

            // Show messages
            show_messages(poncho_json.messages.meme_generator.layers.none.error);
        }
    } catch (e) {
        // console.error(e);
    }
}

function select_active_layer() {
    try {
        // Vars
        var selector_modal_memes = "[data-modal=memes]";
        var selector_meme_generator = selector_modal_memes + " .meme_generator";
        var selector_manage_layers = ".manage-layers .layers";

        // On click - select asset
        $(selector_meme_generator + " " + selector_manage_layers + " li").off("click");
        $(selector_meme_generator + " " + selector_manage_layers + " li").on("click", function () {
            try {
                // Vars
                var data_layer = $(this).attr("data-layer");

                // Remove class
                $(selector_meme_generator + " " + selector_manage_layers + " li").removeClass("active");

                // Set active
                poncho_json.meme_canvas.setActiveObject(poncho_json.meme_canvas._objects[data_layer]);
                poncho_json.meme_canvas.renderAll();

                // Add class
                $(this).addClass("active");
            } catch (e) {
                // console.error(e);
            }
        });
    } catch (e) {
        // console.error(e);
    }
}

function delete_layer() {
    try {
        // Vars
        var selector_modal_memes = "[data-modal=memes]";
        var selector_meme_generator = selector_modal_memes + " .meme_generator";
        var selector_manage_layers = ".manage-layers .layers";

        // On click - select asset
        $(selector_meme_generator + " " + selector_manage_layers + " .delete").off("click");
        $(selector_meme_generator + " " + selector_manage_layers + " .delete").on("click", function () {
            try {
                // Vars
                var data_layer = $(this).closest("li").attr("data-layer");

                // Loop
                poncho_json.meme_canvas.getObjects().forEach(function (object, index) {
                    // Check if
                    if (index == data_layer) {
                        // Delete
                        poncho_json.meme_canvas.remove(object);

                        // Remove
                        $(selector_meme_generator + " .meme img").remove();

                        // Init manage layers
                        init_manage_layers();

                        // Show messages
                        show_messages(poncho_json.messages.meme_generator.layers.delete.success);
                    }
                })
            } catch (e) {
                // console.error(e);
            }
        });
    } catch (e) {
        // console.error(e);
    }
}

function update_layers_index() {
    try {
        // Vars
        var selector_modal_memes = "[data-modal=memes]";
        var selector_meme_generator = selector_modal_memes + " .meme_generator";
        var selector_manage_layers = ".manage-layers .layers";

        // Loop
        poncho_json.meme_canvas.getObjects().forEach(function (object, index) {
            // Vars
            var new_index = $(selector_meme_generator + " " + selector_manage_layers + " li[data-layer=" + index + "]").index();

            // Move
            poncho_json.meme_canvas.moveObjectTo(object, new_index)
        });

        // Init manage layers
        init_manage_layers();
    } catch (e) {
        // console.error(e);
    }
}
function init_meme_generator() {
    try {
        // Vars
        var selector_modal_memes = "[data-modal=memes]";
        var selector_meme_generator = selector_modal_memes + " .meme_generator";

        // Init templates
        init_templates();

        // Add template
        add_template("With_Sign");

        // Load asset
        load_asset("1_Fur");

        // Init left top tools
        init_left_top_tools();

        // Init right top tools
        init_right_top_tools();

        // On click - select template
        $(selector_meme_generator + " .template-button").off("click");
        $(selector_meme_generator + " .template-button").on("click", function () {
            try {
                // Remove clss
                $(selector_meme_generator + " .template-button").removeClass("active");

                // Add class
                $(this).addClass("active");

                // Vars
                var template = $(this).attr("data-template");

                // Add template
                add_template(template);
            } catch (e) {
                // console.error(e);
            }
        });

        // On change - asset type
        $(selector_meme_generator + " [name=asset-type]").off("change");
        $(selector_meme_generator + " [name=asset-type]").on("change", function () {
            try {
                // Vars
                var asset_type = $(this).val();

                // Load asset
                load_asset(asset_type);
            } catch (e) {
                // console.error(e);
            }
        });

        // On click - canvas
        $(selector_meme_generator + " .meme").off("click");
        $(selector_meme_generator + " .meme").on("click", function () {
            try {
                // Init manage layers
                init_manage_layers();
            } catch (e) {
                // console.error(e);
            }
        });

        // Vars
        var accordion_id = $(selector_meme_generator + " .manage-layers .trigger").attr("aria-controls");

        // Open accordion
        open_accordion_by_id(accordion_id);
    } catch (e) {
        // console.error(e);
    }
}

function add_asset(image_src, asset_size) {
    try {
        // Vars
        var selector_modal_memes = "[data-modal=memes]";
        var selector_meme_generator = selector_modal_memes + " .meme_generator";

        // Add image to canvas
        fabric.Image.fromURL(image_src).then((image) => {
            // Remove
            $(selector_meme_generator + " .meme img").remove();

            // Check if
            if (asset_size == "50") {
                // Set attributes
                image.set({
                    hasControls: true,
                    hoverCursor: "auto",
                    left: poncho_json.meme_canvas.width / 2,
                    originX: "center",
                    originY: "center",
                    selectable: true,
                    textAlign: "center",
                    top: poncho_json.meme_canvas.height / 2
                });

                // Scale
                image.scaleToHeight(poncho_json.meme_canvas.height / 2);
                image.scaleToWidth(poncho_json.meme_canvas.width / 2);
            } else {
                // Set attributes
                image.set({
                    hasControls: true,
                    hoverCursor: "auto",
                    selectable: true,
                });

                // Scale
                image.scaleToHeight(poncho_json.meme_canvas.height);
                image.scaleToWidth(poncho_json.meme_canvas.width);
            }

            // Add image
            poncho_json.meme_canvas.add(image);

            // Set active
            poncho_json.meme_canvas.setActiveObject(image);

            // Init manage layers
            init_manage_layers();
        });
    } catch (e) {
        // console.error(e);
    }
}

function add_template(template) {
    try {
        // Vars
        var selector_modal_memes = "[data-modal=memes]";
        var selector_meme_generator = selector_modal_memes + " .meme_generator";

        // Remove
        $(selector_meme_generator + " .meme img").remove();

        try {
            // Destroy fabric
            poncho_json.meme_canvas.dispose();
            poncho_json.meme_canvas = "";
        } catch (e) {
            // console.error(e);
        }

        // New fabric canvas
        poncho_json.meme_canvas = new fabric.Canvas("meme_canvas");
        poncho_json.meme_canvas.preserveObjectStacking = true;

        // Defaults
        fabric.InteractiveFabricObject.ownDefaults = {
            ...fabric.InteractiveFabricObject.ownDefaults,
            borderColor: "#ffa51f",
            borderDashArray: [3, 1, 3],
            borderScaleFactor: 3,
            cornerColor: "lightblue",
            cornerDashArray: [2, 2],
            cornerSize: 30,
            cornerStrokeColor: "#1d48ff",
            cornerStyle: "circle",
            padding: 30,
            touchCornerSize: 40,
            transparentCorners: false
        }

        // Check if
        if (!check_value_defined(template)) {
            // Vars
            template = "With_Sign";
        }

        // Set
        poncho_json.template = template;

        // Add image to canvas
        fabric.Image.fromURL("/dist/img/memes/templates/" + template + ".png?v=3").then((image) => {
            // Set fabric dimensions to match image
            poncho_json.meme_canvas.setHeight(image.height);
            poncho_json.meme_canvas.setWidth(image.width);

            // Set attributes
            image.set({
                hasControls: false,
                hoverCursor: "auto",
                selectable: false
            });

            // Add image
            poncho_json.meme_canvas.add(image);

            // Textbox object
            var textbox_object = {
                fill: "#000",
                fontFamily: "pricedown",
                originX: "center",
                paintFirst: "stroke",
                stroke: "#fbffef",
                strokeWidth: 4,
                textAlign: "center",
            };

            // Check if
            if (template == "With_Sign") {
                // Add
                textbox_object["fontSize"] = image.height / 10;
                textbox_object["left"] = image.width / 2;
                textbox_object["top"] = image.height / 6;
                textbox_object["width"] = image.width / 1.5;

                // Textbox
                var text_object = new fabric.Textbox("Create Your\nPoncho Meme", textbox_object);
            } else if (template == "Change_My_Mind") {
                // Add
                textbox_object["fontSize"] = image.height / 13;
                textbox_object["left"] = image.width / 2;
                textbox_object["top"] = image.height / 1.515;
                textbox_object["width"] = image.width / 2;

                // Textbox
                var text_object = new fabric.Textbox("Create Your\nPoncho Meme", textbox_object);
            } else if (template == "Smart") {
                // Add
                textbox_object["fontSize"] = image.height / 13;
                textbox_object["left"] = image.width / 1.282;
                textbox_object["top"] = image.height / 13.5;
                textbox_object["width"] = image.width / 4;

                // Textbox
                var text_object = new fabric.Textbox("Create Your\nPoncho Meme", textbox_object);
            } else if (template == "Drake_Hotline_Bling") {
                // Vars
                var textbox_object_1 = textbox_object;
                var textbox_object_2 = textbox_object;

                // Add
                textbox_object_1["fontSize"] = image.height / 13;
                textbox_object_1["left"] = image.width / 1.315;
                textbox_object_1["top"] = image.height / 6.6;
                textbox_object_1["width"] = image.width / 3;

                // Textbox
                var text_object = new fabric.Textbox("Poncho\nHate", textbox_object_1);

                // Add
                textbox_object_2["fontSize"] = image.height / 13;
                textbox_object_2["left"] = image.width / 1.315;
                textbox_object_2["top"] = image.height / 1.53;
                textbox_object_2["width"] = image.width / 3;

                // Textbox
                var text_object_two = new fabric.Textbox("Poncho\nLike", textbox_object_2);
            } else if (template == "Truck") {
                // Add
                textbox_object["fontSize"] = image.height / 7;
                textbox_object["left"] = image.width / 2.65;
                textbox_object["top"] = image.height / 3.4;
                textbox_object["width"] = image.width / 2;

                // Textbox
                var text_object = new fabric.Textbox("Create Your\nPoncho Meme", textbox_object);
            } else if (template == "Ponchonator") {
                // Add
                textbox_object["fontSize"] = image.height / 13;
                textbox_object["left"] = image.width / 2;
                textbox_object["top"] = image.height / 1.4;
                textbox_object["width"] = image.width / 1.25;

                // Textbox
                var text_object = new fabric.Textbox("The\nPonchonator", textbox_object);
            } else if (template == "Ponchonator") {
                // Add
                textbox_object["fontSize"] = image.height / 13;
                textbox_object["left"] = image.width / 2;
                textbox_object["top"] = image.height / 1.4;
                textbox_object["width"] = image.width / 1.25;

                // Textbox
                var text_object = new fabric.Textbox("The\nPonchonator", textbox_object);
            } else if (template == "Dark_Planet") {
                // Add
                textbox_object["fontSize"] = image.height / 10;
                textbox_object["left"] = image.width / 2;
                textbox_object["top"] = image.height / 1.45;
                textbox_object["width"] = image.width / 1.25;

                // Textbox
                var text_object = new fabric.Textbox("Create Your\nPoncho Meme", textbox_object);
            } else if (
                template == "Gold_Poncho" ||
                template == "Celebration" ||
                template == "McDonalds" ||
                template == "Workout"
            ) {
                // Vars
                var textbox_object_1 = textbox_object;
                var textbox_object_2 = textbox_object;

                // Add
                textbox_object_1["fontSize"] = image.height / 10;
                textbox_object_1["left"] = image.width / 2;
                textbox_object_1["top"] = image.height / 18;
                textbox_object_1["width"] = image.width / 1.25;

                // Textbox
                var text_object = new fabric.Textbox("Top Text", textbox_object_1);

                // Add
                textbox_object_2["fontSize"] = image.height / 10;
                textbox_object_2["left"] = image.width / 2;
                textbox_object_2["top"] = image.height / 1.21;
                textbox_object_2["width"] = image.width / 1.25;

                // Textbox
                var text_object_two = new fabric.Textbox("Bottom Text", textbox_object_2);
            } else {
                // Add
                textbox_object["fontSize"] = image.height / 10;
                textbox_object["left"] = image.width / 2;
                textbox_object["originY"] = "center";
                textbox_object["top"] = image.height / 2;
                textbox_object["width"] = image.width / 1.5;

                // Textbox
                var text_object = new fabric.Textbox("Create Your\nPoncho Meme", textbox_object);
            }

            // Add text
            poncho_json.meme_canvas.add(text_object);
            // poncho_json.meme_canvas.centerObjectH(text_object);
            poncho_json.meme_canvas.setActiveObject(text_object);

            // Check if
            if (text_object_two) {
                // Add text
                poncho_json.meme_canvas.add(text_object_two);
            }

            // Init manage layers
            init_manage_layers();
        });
    } catch (e) {
        // console.error(e);
    }
}

function init_emoji_picker() {
    try {
        // Vars
        var selector_modal_memes = "[data-modal=memes]";
        var selector_meme_generator = selector_modal_memes + " .meme_generator";
        var emoji_script = document.createElement("script");
        emoji_script.setAttribute("type", "module");
        emoji_script.setAttribute("id", "emoji_script_id");

        // Code
        var code = `
                import "/dist/emojis/index.js?v=372"
                import insertText from "/dist/emojis/insert-text-at-cursor.js?v=372"
        
                // Windor insertText function
                window.insertText = insertText;
            `;

        try {
            // Append
            emoji_script.appendChild(document.createTextNode(code));
            document.body.appendChild(emoji_script);
        } catch (e) {
            // console.error(e);
        }

        // On click
        $(selector_meme_generator + " .icon").off("click");
        $(selector_meme_generator + " .icon").on("click", function (e) {
            // Var
            var emoji_picker = $(selector_meme_generator + " emoji-picker");

            // Check if
            if (emoji_picker.is(":visible")) {
                // Close
                $(this).removeClass("open");
            } else {
                // Open
                $(this).addClass("open");
            }

            // Toggle
            emoji_picker.toggle("fast");
        });

        // On click
        $("emoji-picker").off("emoji-click");
        $("emoji-picker").on("emoji-click", function (e) {
            // Vars
            var new_textbox = true;
            var active_object = poncho_json.meme_canvas.getActiveObject();

            // Check if
            if (active_object) {
                // Check if
                if (active_object.type == "textbox") {
                    // Vars
                    new_textbox = false;

                    // Add icon
                    active_object.set("text", active_object.text + " " + e.detail.unicode);
                    poncho_json.meme_canvas.renderAll();
                }
            }

            // Check if
            if (new_textbox) {
                // Textbox
                var text_object = new fabric.Textbox(e.detail.unicode, {
                    fontFamily: "pricedown",
                    fontSize: poncho_json.meme_canvas.height / 10,
                    fill: "#000",
                    left: poncho_json.meme_canvas.width / 2,
                    originX: "center",
                    originY: "center",
                    paintFirst: "stroke",
                    stroke: "#fff",
                    strokeWidth: 4,
                    textAlign: "center",
                    top: poncho_json.meme_canvas.height / 2,
                    width: poncho_json.meme_canvas.width / 1.5
                });

                // Add text
                poncho_json.meme_canvas.add(text_object);
                poncho_json.meme_canvas.setActiveObject(text_object);
            }
        });
    } catch (e) {
        // console.error(e);
    }
}

function init_left_top_tools() {
    try {
        // Vars
        var canvas = document.getElementById("meme_canvas");
        var selector_modal_memes = "[data-modal=memes]";
        var selector_meme_generator = selector_modal_memes + " .meme_generator";

        // On click - reset
        $(selector_meme_generator + " .reset").off("click");
        $(selector_meme_generator + " .reset").on("click", function () {
            try {
                // Add template
                add_template(poncho_json.template);

                // Show messages
                show_messages(poncho_json.messages.meme_generator.reset.success);
            } catch (e) {
                // console.error(e);
            }
        });

        // On click - save
        $(selector_meme_generator + " .edit").off("click");
        $(selector_meme_generator + " .edit").on("click", function () {
            try {
                // Remove
                $(selector_meme_generator + " .meme img").remove();

                // Init manage layers
                init_manage_layers();

                // Show messages
                show_messages(poncho_json.messages.meme_generator.edit.success);
            } catch (e) {
                // console.error(e);
            }
        });

        // On click - save
        $(selector_meme_generator + " .save").off("click");
        $(selector_meme_generator + " .save").on("click", function () {
            try {
                // Remove
                $(selector_meme_generator + " .meme img").remove();

                // Remove active
                poncho_json.meme_canvas.discardActiveObject();
                poncho_json.meme_canvas.renderAll();

                // Canvas to blob
                canvas.toBlob((blob) => {
                    // New image
                    var image = new Image();

                    // URL
                    var url = URL.createObjectURL(blob);

                    // Image source
                    image.src = url;

                    // Append
                    $(selector_meme_generator + " .meme").append(image);

                    // Show messages
                    show_messages(poncho_json.messages.meme_generator.save.success);
                });
            } catch (e) {
                // console.error(e);
            }
        });

        // On click - download
        $(selector_meme_generator + " .download").off("click");
        $(selector_meme_generator + " .download").on("click", function () {
            try {
                // Remove active
                poncho_json.meme_canvas.discardActiveObject();
                poncho_json.meme_canvas.renderAll();

                // Canvas to blob
                canvas.toBlob((blob) => {
                    // URL
                    var url = URL.createObjectURL(blob);

                    // Create link
                    var link = document.createElement("a");
                    link.href = url;
                    link.download = "poncho_meme.png";

                    // Click
                    link.click();
                    link.remove();

                    // Init manage layers
                    init_manage_layers();

                    // Show messages
                    show_messages(poncho_json.messages.meme_generator.download.success);
                });
            } catch (e) {
                // console.error(e);
            }
        });

        // On click - expand
        $(selector_meme_generator + " .expand").off("click");
        $(selector_meme_generator + " .expand").on("click", function () {
            try {
                // Hide
                $(this).hide();

                // Show
                $(selector_meme_generator + " .compress").show();

                // Remove class
                $(selector_meme_generator).removeClass("compress");

                // Add class
                $(selector_meme_generator).addClass("expand");
            } catch (e) {
                // console.error(e);
            }
        });

        // On click - compress
        $(selector_meme_generator + " .compress").off("click");
        $(selector_meme_generator + " .compress").on("click", function () {
            try {
                // Hide
                $(this).hide();

                // Show
                $(selector_meme_generator + " .expand").show();

                // Remove class
                $(selector_meme_generator).removeClass("expand");

                // Add class
                $(selector_meme_generator).addClass("compress");
            } catch (e) {
                // console.error(e);
            }
        });
    } catch (e) {
        // console.error(e);
    }
}

function init_right_top_tools() {
    try {
        // Vars
        var selector_modal_memes = "[data-modal=memes]";
        var selector_meme_generator = selector_modal_memes + " .meme_generator";

        // On click - text
        $(selector_meme_generator + " .text").off("click");
        $(selector_meme_generator + " .text").on("click", function () {
            try {
                // Remove
                $(selector_meme_generator + " .meme img").remove();

                // Textbox
                var text_object = new fabric.Textbox("Create Your\nPoncho Meme", {
                    fontFamily: "pricedown",
                    fontSize: poncho_json.meme_canvas.height / 10,
                    fill: "#000",
                    left: poncho_json.meme_canvas.width / 2,
                    originX: "center",
                    originY: "center",
                    paintFirst: "stroke",
                    stroke: "#fff",
                    strokeWidth: 4,
                    textAlign: "center",
                    top: poncho_json.meme_canvas.height / 2,
                    width: poncho_json.meme_canvas.width / 1.5
                });

                // Add textbox
                poncho_json.meme_canvas.add(text_object);
                poncho_json.meme_canvas.setActiveObject(text_object);

                // Init manage layers
                init_manage_layers();
            } catch (e) {
                // console.error(e);
            }
        });

        // Init emoji picker
        init_emoji_picker();

        // On click - shape
        $(selector_meme_generator + " .shape").off("click");
        $(selector_meme_generator + " .shape").on("click", function () {
            try {
                // Remove
                $(selector_meme_generator + " .meme img").remove();

                // Rectangle 
                var rectangle = new fabric.Rect({
                    fill: "#fbffef",
                    height: poncho_json.meme_canvas.height / 2,
                    left: poncho_json.meme_canvas.width / 2,
                    originX: "center",
                    originY: "center",
                    stroke: "#000",
                    strokeWidth: 3,
                    textAlign: "center",
                    top: poncho_json.meme_canvas.height / 2,
                    width: poncho_json.meme_canvas.width / 2
                });

                // Add rectangle
                poncho_json.meme_canvas.add(rectangle);
                poncho_json.meme_canvas.setActiveObject(rectangle);

                // Init manage layers
                init_manage_layers();
            } catch (e) {
                // console.error(e);
            }
        });
    } catch (e) {
        // console.error(e);
    }
}

function init_templates() {
    try {
        // Vars
        var selector_modal_memes = "[data-modal=memes]";
        var selector_meme_generator = selector_modal_memes + " .meme_generator";

        // Folder
        var folder = "/dist/img/memes/templates/small/";

        // Loop
        $(poncho_json.memes.templates).each(function (index, value) {
            // Vars
            var active = value.state;
            var filename = value.filename;
            var filename_array = filename.split(".");
            var filename_title = filename_array[0];
            filename_title = filename_title.replaceAll("_", " ");
            filename_title = filename_title.replaceAll("&", " & ");
            filename = filename + "." + value.filetype;

            // Vars
            var gallery_string = '<button class="template-button ' + active + '" data-template="' + filename_array[0] + '"  type="button" title="' + filename_title + '"><img src="' + folder + filename + '" alt="' + filename_title + '" loading="lazy"></button>';

            // Append
            $(selector_meme_generator + " .templates .gallery .inner").append(gallery_string);
        });
    } catch (e) {
        // console.error(e);
    }
}

function load_asset(asset_type) {
    try {
        // Vars
        var selector_modal_memes = "[data-modal=memes]";
        var selector_meme_generator = selector_modal_memes + " .meme_generator";
        var folder = "https://www.ponchobase.com/dist/img/memes/assets/" + asset_type + "/";

        // Check if
        if (!asset_type) {
            // Vars
            asset_type = "1_Fur";
        }

        // Get folder
        $.ajax({
            url: folder,
            success: function (data) {
                // Check if
                if (data) {
                    // Empty
                    $(".assets .gallery .inner").empty();

                    // Loop
                    $(data).find("a").attr("href", function (i, val) {
                        // Check if
                        if (val.match(/\.(jpe?g|png|gif)$/)) {
                            // Vars
                            var filename_array = val.split(".");
                            var filename_title = filename_array[0];
                            filename_title = filename_title.replaceAll("_", " ");
                            filename_title = filename_title.replaceAll("&", " & ");

                            // Vars
                            var gallery_string = '<button class="asset-button" type="button" title="' + filename_title + '"><img src="' + folder + val + '" alt="' + filename_title + '" loading="lazy"></button>';

                            // Append
                            $(selector_meme_generator + " .assets .gallery .inner").append(gallery_string);
                        }
                    });
                }

                // On click - select asset
                $(selector_meme_generator + " .asset-button").off("click");
                $(selector_meme_generator + " .asset-button").on("click", function () {
                    try {
                        // Vars
                        var image = $(this).find("img").attr("src");
                        var asset_size = $(selector_meme_generator + " [name=asset-size]").val();

                        // Add asset
                        add_asset(image, asset_size);
                    } catch (e) {
                        // console.error(e);
                    }
                });
            }
        });
    } catch (e) {
        // console.error(e);
    }
}

function set_active_object() {
    try {
        // Vars
        var selector_modal_memes = "[data-modal=memes]";
        var selector_meme_generator = selector_modal_memes + " .meme_generator";
        var selector_manage_layers = ".manage-layers .layers";

        // Vars
        var number_objects = poncho_json.meme_canvas.getObjects().length;

        // Remove class
        $(selector_meme_generator + " " + selector_manage_layers + " li").removeClass("active");

        // Check if
        if (number_objects > 0) {
            // Vars
            var object_number = poncho_json.meme_canvas.getObjects().indexOf(poncho_json.meme_canvas.getActiveObject());

            // Add class
            $(selector_meme_generator + " " + selector_manage_layers + " li[data-layer=" + object_number + "]").addClass("active");
        }
    } catch (e) {
        // console.error(e);
    }
}

function set_active_object_front() {
    try {
        // Vars
        var selector_modal_memes = "[data-modal=memes]";
        var selector_meme_generator = selector_modal_memes + " .meme_generator";
        var selector_manage_layers = ".manage-layers .layers";

        // Vars
        var number_objects = poncho_json.meme_canvas.getObjects().length;

        // Remove class
        $(selector_meme_generator + " " + selector_manage_layers + " li").removeClass("active");

        // Check if
        if (number_objects > 0) {
            // Vars
            var object_number = number_objects - 1;

            // Set active
            poncho_json.meme_canvas.setActiveObject(poncho_json.meme_canvas._objects[object_number]);
            poncho_json.meme_canvas.renderAll();

            // Add class
            $(selector_meme_generator + " " + selector_manage_layers + " li[data-layer=" + object_number + "]").addClass("active");
        }
    } catch (e) {
        // console.error(e);
    }
}

function upload_image(e) {
    try {
        // Vars
        var selector_modal_memes = "[data-modal=memes]";
        var selector_meme_generator = selector_modal_memes + " .meme_generator";

        // File
        var file = e.currentTarget.files[0];

        // File reader
        var reader = new FileReader();

        // Fired when a read has completed, successfully or not.
        reader.onloadend = function () {
            // Image
            fabric.Image.fromURL(reader.result).then((image) => {
                // Remove
                $(selector_meme_generator + " .meme img").remove();

                // Set attributes
                image.set({
                    hasControls: true,
                    hoverCursor: "auto",
                    left: poncho_json.meme_canvas.width / 2,
                    originX: "center",
                    originY: "center",
                    selectable: true,
                    textAlign: "center",
                    top: poncho_json.meme_canvas.height / 2
                });

                // Add image
                image.scaleToHeight(poncho_json.meme_canvas.height / 2);
                image.scaleToWidth(poncho_json.meme_canvas.width / 2);
                poncho_json.meme_canvas.add(image);
                poncho_json.meme_canvas.setActiveObject(image);

                // Init manage layers
                init_manage_layers();
            });
        }

        // Fired when the read failed due to an error.
        reader.onerror = function () {
            // Show messages
            show_messages(poncho_json.messages.meme_generator.upload_iamge.error);
        }

        // Check if
        if (file && (/\.(jpe?g|png)$/i.test(file.name))) {
            // Read the contents of the specified Blob or File
            reader.readAsDataURL(file);
        } else {
            // Show messages
            show_messages(poncho_json.messages.meme_generator.upload_iamge.error);
        }

        // Clear
        $(e.currentTarget).val("");
    } catch (e) {
        // console.error(e);
    }
}

function upload_template(e) {
    try {
        // Vars
        var selector_modal_memes = "[data-modal=memes]";
        var selector_meme_generator = selector_modal_memes + " .meme_generator";

        // File
        var file = e.currentTarget.files[0];

        // File reader
        var reader = new FileReader();

        // Fired when a read has completed, successfully or not.
        reader.onloadend = function () {
            // Remove
            $(selector_meme_generator + " .meme img").remove();

            try {
                // Destroy fabric
                poncho_json.meme_canvas.dispose();
                poncho_json.meme_canvas = "";
            } catch (e) {
                // console.error(e);
            }

            // New fabric canvas
            poncho_json.meme_canvas = new fabric.Canvas("meme_canvas");
            poncho_json.meme_canvas.preserveObjectStacking = true;

            // Defaults
            fabric.InteractiveFabricObject.ownDefaults = {
                ...fabric.InteractiveFabricObject.ownDefaults,
                cornerSize: 30,
                touchCornerSize: 40,
                cornerStrokeColor: "#1d48ff",
                cornerColor: "lightblue",
                cornerStyle: "circle",
                padding: 30,
                transparentCorners: false,
                cornerDashArray: [2, 2],
                borderColor: "#ffa51f",
                borderDashArray: [3, 1, 3],
                borderScaleFactor: 3
            }

            // Add image to canvas
            fabric.Image.fromURL(reader.result).then((image) => {
                // Set fabric dimensions to match image
                poncho_json.meme_canvas.setHeight(image.height);
                poncho_json.meme_canvas.setWidth(image.width);

                // Set attributes
                image.set({
                    hasControls: false,
                    hoverCursor: "auto",
                    selectable: false
                });

                // Add image
                poncho_json.meme_canvas.add(image);

                // Textbox
                var text_object = new fabric.Textbox("Create Your\nPoncho Meme", {
                    fontFamily: "pricedown",
                    fontSize: image.height / 10,
                    left: image.width / 2,
                    originX: "center",
                    originY: "center",
                    textAlign: "center",
                    top: image.height / 2,
                    width: image.width / 1.5
                });

                // Add text
                poncho_json.meme_canvas.add(text_object);
                poncho_json.meme_canvas.setActiveObject(text_object);

                // Init manage layers
                init_manage_layers();
            });
        }

        // Fired when the read failed due to an error.
        reader.onerror = function () {
            // Show messages
            show_messages(poncho_json.messages.meme_generator.upload_template.error);
        }

        // Check if
        if (file && (/\.(jpe?g|png)$/i.test(file.name))) {
            // Read the contents of the specified Blob or File
            reader.readAsDataURL(file);
        } else {
            // Show messages
            show_messages(poncho_json.messages.meme_generator.upload_template.error);
        }

        // Clear
        $(e.currentTarget).val("");
    } catch (e) {
        // console.error(e);
    }
}